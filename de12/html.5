<!DOCTYPE html>
<html lang="jp">
    <title>🖤</title>
    <link rel="stylesheet" href="./css/style.css">
<head></head>
<h3>第5回課題<br>
<br>Windowsの壁紙スライダーをpythonで作成
<br>
<h4>ソースコード</h4>
ソースコード<br>

<code>
    <ol style="list-style:decimal-leading-zero outside;in-left:0;padding-left:36px;margin:0;background-color:#EEF;color:#000;">
    <li style="background-color:#EFF;">import ctypes</li>
    <li style="background-color:#EEF;">import os</li>
    <li style="background-color:#EFF;">import glob</li>
    <li style="background-color:#EEF;">import time</li>
    <li style="background-color:#EFF;">import threading</li>
    <li style="background-color:#EEF;">import random</li>
    <li style="background-color:#EFF;">import codecs</li>
    <li style="background-color:#EEF;">import sys</li>
    <li style="background-color:#EFF;"></li>
    <li style="background-color:#EEF;">INTERVAL_SEC = 3</li>
    <li style="background-color:#EFF;">class BgSlider()</li>
    <li style="background-color:#EEF;">#classとは「ひな型」の事で、ひな型の中にデータを入れる領域、処理の仕方を書く領域を設ける。<br></li>
    <li style="background-color:#EFF;">def __init__(self):</li>
    <li style="background-color:#EEF;">self.index = 0</li>
    <li style="background-color:#EFF;">self.directory = None</li>
    <li style="background-color:#EEF;"></li>
    <li style="background-color:#EFF;">def setup(self):</li>
    <li style="background-color:#EEF;">global off/li>
    <li style="background-color:#EFF;">with codecs.open('path.txt', 'r', 'utf-8') as f:<br></li>
    <li style="background-color:#EEF;">#with構文は、cLose処理を省することができる。開始時と終了時の定型処理を必ず実行してくれるというメリットがある。</li>
    <li style="background-color:#EFF;">#asを使うことで、ライプラリ名に好きな名前をつけることができる。</li>
    <li style="background-color:#EEF;">#path.txtというファイルを好きなディレクトリに書き換える。<br> </li>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;lines = f.readlines()</li>
    <li style="background-color:#EEF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.directory = lines[0].strip()</li>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
    <li style="background-color:#EEF;"></li>def worker(self):
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;path = self.directory + r'\*.jpg'</li>
    <li style="background-color:#EEF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path.replace('\\\\', '\\')</li>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;with codecs.open(r<font style="color:brown;">files = glob.glob(path)<br></font>, <font style="color:brown;">'r'</font>, <font style="color:brown;">'utf-8'</font>) as f:</li>
    <li style="background-color:#EEF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# [print(file) for file in files] </li>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ファイルリストをコンソールにまとめて出力するときに使う</li>
    <li style="background-color:#EEF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#file = files[random.randint(0, len(files) - 1)] </li>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ランダムにしたい場合はここを使う<br></li>
    <li style="background-color:#EEF;"></li>files = sorted(files) <br>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;def worker(self):</li>
    <li style="background-color:#EEF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path = self.directory + r<font style="color:brown;">'\*.jpg'</font></li>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path.replace(<font style="color:brown;">'\\\\', '</font>\\')</li>
    <li style="background-color:#EEF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;files = glob.glob(path)</li>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# [print(file) for file in files] # ファイルリストをコンソールにまとめて出力するときに使う</li>
    <li style="background-color:#EEF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# file = files[random.randint(0, len(files) - 1)] # ランダムにしたい場合はここを使う</li>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;files = sorted(files) # 順番に表示したい場合はここを使う</li>
    <li style="background-color:#EEF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file = files[self.index] # 順番に表示したい場合はここを使う</li>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(file)</li>
    <li style="background-color:#EEF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctypes.windll.user32.SystemParametersInfoW(20, 0, file, 0)</li>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self.index == len(files) - 1:</li>
    <li style="background-color:#EEF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.index = 0</li>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:</li>
    <li style="background-color:#EEF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.index += 1</li>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time.sleep(INTERVAL_SEC)</li>
    <li style="background-color:#EEF;"></li>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;def schedule(self, interval, f, wait=True):</li>
    <li style="background-color:#EEF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;base_time = time.time()</li>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next_time = 0</li>
    <li style="background-color:#EEF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while True:#while→指定した条件が真の間、処理を繰り返し実行</li>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try:</li>
    <li style="background-color:#EEF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = threading.Thread(target=f)</li>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.start()</li>
    <li style="background-color:#EEF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if wait:</li>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.join()</li>
    <li style="background-color:#EEF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next_time = ((base_time - time.time()) % interval) or interval</li>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time.sleep(next_time)</li>
    <li style="background-color:#EEF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except KeyboardInterrupt:</li>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit()</li>
    <li style="background-color:#EEF;"></li>
    <li style="background-color:#EFF;"></li>
    <li style="background-color:#EEF;">if __name__ == "__main__":</li>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;try:</li>
    <li style="background-color:#EEF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bg = BgSlider()</li>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bg.setup()</li>
    <li style="background-color:#EEF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bg.schedule(INTERVAL_SEC, bg.worker, False)</li>
    <li style="background-color:#EFF;">&nbsp;&nbsp;&nbsp;&nbsp;finally:</li>
    <li style="background-color:#EEF;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctypes.windll.user32.SystemParametersInfoW(20, 0, None, 0)</li>
    </ol></code>
<br>
<br>